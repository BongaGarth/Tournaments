@model Template.Model.Models.EventModel

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/shared/_Layout.cshtml";
}

<h2>Create</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>EventModel</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.TournamentID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TournamentID, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.TournamentID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EventName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EventName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.EventName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EventNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EventNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.EventNumber, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <label class="control-label col-md-3 col-sm-3 col-xs-12">Time<span class="required">*</span> </label>
            <div class="col-md-9 col-sm-9 col-xs-12">
                @Html.TextBoxFor(m => m.EvenStarTime, new { @class = "form-control time" })
                @Html.ValidationMessageFor(m => m.EvenStarTime)
            </div>
        </div>
        <div class="form-group">
            <label class="control-label col-md-3 col-sm-3 col-xs-12">Date<span class="required">*</span></label>
            <div class="col-md-9 col-sm-9 col-xs-12">
                @Html.TextBoxFor(model => model.EventEndTime, new { @class = "form-control time" })
                @Html.ValidationMessageFor(model => model.EventEndTime)
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.AutoClose, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.AutoClose)
                    @Html.ValidationMessageFor(model => model.AutoClose, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<script src="~/Scripts/jquery-3.4.1.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
@section scripts{

    <script>

        $('.date').datepicker({
            minDate: 0,
            format: "dd/mm/yyyy",
            todayHighlight: true,
            clearBtn: true,
            orientation: "bottom left",
            autoclose: true
        });
        $('.time').clockpicker({
            placement: 'bottom',
            align: 'left',
            donetext: 'Done',
            twentyfourhour: true
        });

        jQuery.validator.methods.date = function (value, element) {
            var isChrome = /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);
            if (isChrome) {
                var d = new Date();
                return this.optional(element) || !/Invalid|NaN/.test(new Date(d.toLocaleDateString(value)));
            } else {
                return this.optional(element) || !/Invalid|NaN/.test(new Date(value));
            }
        };

    </script>

}
